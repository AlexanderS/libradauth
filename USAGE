1.) Create a server definition file. Refer to the `servers.example'
    file for more information. Note, that *all* servers in that file
    will be queried sequentially, until the first one answers.

2.) Be sure you have a RADIUS dictionary. It should at least include
    the attributes "User-Name", "User-Password", "CHAP-Password",
    "Nas-IP-Address", "NAS-Port", as they are mandatory for a RFC 2865
    compliant RADIUS packet. The default search path is defined by the
    FreeRADIUS installation (specifically in freeradius/radpaths.h).

3.) Call

        rad_auth_simple(user, pw, config)

    or, alternatively,

        rad_auth(user, pw, retries, config, dict, vps)

    from your program, where `user', `pw' and `config' are char*
    strings. All servers in the config file will be tried until any of
    them answers. This will be tried three times in total.

    `retries' is an integer specifying how many times the
    authentication should be tried. The `dict' argument must be a
    (const char *[2]) array. If you specify NULL here, a temporary
    file containig an RFC 2865 compliant dictionary will be created.

    The `vps' argument is a simple char* string and may contain
    additional value pairs that will be added to the request. Multiple
    VPs can be separated by commas. Be aware that invalid attributes
    will be silently discarded.

    Refer to `radauth_test.c' for a complete example.

    return code | meaning
    ------------+----------------------------------------------
        0       | authentication: Accepted
        1       | authentication: Rejected
       -1       | an error happened; look at rad_auth_errstr()
       -2       | no servers could be reached

3a.) If things don't work, re-compile the library with -DDEBUG, or via
    `make clean && make DEBUG=1'. You should get tons of output, then.
